 1) Что такое ветка в GIT?
   	Ветка (бранч) - это версия проекта, кот имеет название. В проекте может быть много  веток, 
	и между ними можно переключаться. При переключении на другую ветку - версия кода динамически  
	изменяется на компьютере. Ветки могут быть локальными и  удаленными. Так же как репозиторий есть 
	локальный и  удаленный, так и ветки в нем могут храниться только локально, только удаленно, и также
	и локально и удаленно.
	Ветки нужны для того, чтобы программисты могли вести совместную работу над проектом и не мешать друг
	другу при  этом. При создании проекта, Git создает базовую ветку. Она называется master веткой. Она 
	считается центральной  веткой.

 2) Какое отношение имеют ssh-ключи к GITHUB?
	При любом сохранении данных из локального Git- репозитория в репозиторий на GitHub (напр., при 
	выполнении команды git push) сервер проводит аутентификацию пользователя, чтобы понять, кто именно к 
	нему обращается. При этом можно каждый раз с клавиатуры вводить своё имя и пароль, под которыми мы
	регистрировались на GitHub, но гораздо удобнее один раз настроить аутентификацию по ключам SSH. После 
	этого процедура проверки подлинности будет проходить незаметно для нас, никакие дополнительные пароли 
	вводить не придётся.

 3) Что позволяет делать сервис GitHub Pages?
	Он позволяет загружать репозитории кода для хранения в системе управления версиями Git. 
	Сервис Github Pages предоставляет следующие возможности для статических сайтов:
		Использование HTML, CSS, языка разметки Markdown;
		Встраивание изображений и другого медиа;
		Использование JavaScript.
	Ограничения:
	Нельзя использовать на сайте PHP либо другие серверные языки: 
		если нужны   формы например, обратной связи, то их придется создать в каких-нибудь 
		конструкторах типа   FormDesigner и затем уже встроить;
		Серверный код и серверные скрипты выполняться не   будут;
		Cookies не используются.

 4) Создание, удаление веток:
	Создать новую ветку можно с помощью команды git branch <название ветки>. Важно, чтобы название было 
	понятным для вас и других участников проекта. Создадим новую ветку для проекта: git branch input. 
	Переключимся на новую ветку с помощью команды git checkout input
	Сначала надо создать удаленную ветку:
		git push origin origin:refs/heads/new_branch_name
	Стянуть её git pull origin
	Посмотреть появилась ли в списке удаленных веток:
		git branch -r
	Создать локальную ветку и закрепить ее за удаленной
		git checkout --track -b new_branch_name origin/new_branch_name
	Удалить удаленную ветку можно так
		git push origin :heads/new_branch_name
	Локальная ветка автоматически создается, когда делаем
		git checkout new_branch_name
        Для начала нам необходимо запушить свою локальную ветку в удаленный репозиторий. Для этого послe
	индексации и коммита необходимо в терминале выполнить команду git push origin    new-branch. 
	new-branch - это имя нашей ветки, которая будет создана после этой команды в удаленном репозитории.
	Оно должно совпадать с названием ветки, на которой мы сейчас находимся.          
 5) Переключение между ветками:
	Если вы работаете в какой то ветке (имеете незакомиченные файлы), при переключении на другую ветку
	git попробует смерджить всю вашу текущую работу с этой другой веткой. При этом могут возникнуть 
	конфликты, а часть работы при переключении обратно позже вообще может быть утеряна. Поэтому, если 
	надо переключиться на другую ветку (например чтобы проверить пулл реквест соседа), нужно сделать из 
	следующих действий:
		Перед переключением закомить все файлы. Переключится только когда у вас локально нет никаких 
	изменений.
 		Если код не до конца рабочий и вы не нужно его коммитить, можно его временно "спрятать", 
	используя команду git stash. В гите есть спец "карман", в котором можно хранить куски кода. После 
	выполнения этой команды все ваши изменения локально исчезнут, и будут помещены в этот карман. 
	То есть код откатится до изначального состояния. Теперь можно смело переходить на другие ветки. 
	Когда вы вернетесь обратно на свою ветку и захотите снова увидеть свои изменения, выполните команду 
	git stash   apply      - это вернет последние изменения из кармана обратно в вашу ветку.

 6) Загрузка и удаление веток на GitHub.
	УДАЛИТЬ ВЕТКУ МОЖНО КОМАНДОЙ:
          $ git push origin --delete master
        
	Как добавить ветку на GitHub?
   	Перейдите в репозиторий и кликните по выпадающему меню в левой части экрана. Там еще написано Branch:
	master. Задайте имя новой ветки и выберите Create branch (либо нажмите Enter на клавиатуре)

  7) Коротко опишите, каким образом происходит публикация статического веб-сайта с помощьюGitHub Pages:
	Перейдите в настройки (Settings) созданного репозитория.
	В настройках репозитория найдите вкладку Pages, на ней установите в качестве источника файлов вашей 
	страницы ветку main и директорию root (от корня проекта) созданного репозитория и сохраните.
	Теперь ваш сайт опубликован и доступен по адресу вида your-account-name.github.io/repo-name.
	Для проверки работы сайта просто перейдите по адресу https://your-account-name.github.io/repo-name – 
	и вы увидите свою страницу, загруженную на Github Pages.